// Generated by CoffeeScript 1.6.3
var Event, Revision, RevisionId;

Event = require("./event");

RevisionId = require("./revision-id");

module.exports = Revision = (function() {
  function Revision(props) {
    this.setProperties(props);
    this.setDefaults();
    Object.defineProperty(this, "id", {
      enumerable: true,
      get: this.identify
    });
  }

  Revision.prototype.setProperties = function(props) {
    if (props == null) {
      props = {};
    }
    this.resourceType = props.resourceType;
    this.resourceUUId = props.resourceUUId;
    return this.number = props.number;
  };

  Revision.prototype.setDefaults = function() {
    return this.events = [];
  };

  Revision.prototype.identify = function() {
    return new Revision.Identity({
      resourceUUId: this.resourceUUId,
      number: this.number
    });
  };

  Revision.prototype.addEvent = function(type, payload) {
    var event;
    event = new Event({
      type: type,
      payload: payload,
      resourceType: this.resourceType,
      resourceUUId: this.resourceUUId,
      revisionNumber: this.number,
      index: this.events.length
    });
    this.events.push(event);
    return event;
  };

  return Revision;

})();

Revision.Identity = (function() {
  function Identity(props) {
    this.setProperties(props);
  }

  Identity.prototype.setProperties = function(props) {
    if (props == null) {
      props = {};
    }
    this.resourceUUId = props.resourceUUId;
    return this.number = props.number;
  };

  Identity.prototype.toString = function() {
    var buffer;
    buffer = new Buffer(4);
    buffer.writeUInt32LE(this.number, 0);
    return this.resourceUUId + "-" + buffer.toString("hex");
  };

  return Identity;

})();

Revision.Identity.parse = function(str) {
  var buffer, number, uuid;
  if (str == null) {
    str = "";
  }
  str = str.replace(/-/g, '');
  buffer = new Buffer(str, 'hex');
  uuid = require('uuid').unparse(buffer.slice(0, 16));
  number = buffer.readUInt32LE(16);
  return new Revision.Identity({
    resourceUUId: uuid,
    number: number
  });
};

/*
//@ sourceMappingURL=revision.map
*/
